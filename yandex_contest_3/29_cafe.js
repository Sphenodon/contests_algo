/*Около Петиного университета недавно открылось новое кафе, в котором действует следующая система скидок: при каждой покупке более чем на 100 рублей покупатель получает купон, дающий право на один бесплатный обед (при покупке на сумму 100 рублей и меньше такой купон покупатель не получает).

Однажды Пете на глаза попался прейскурант на ближайшие N дней. Внимательно его изучив, он решил, что будет обедать в этом кафе все N дней, причем каждый день он будет покупать в кафе ровно один обед. Однако стипендия у Пети небольшая, и поэтому он хочет по максимуму использовать предоставляемую систему скидок так, чтобы его суммарные затраты были минимальны. Требуется найти минимально возможную суммарную стоимость обедов и номера дней, в которые Пете следует воспользоваться купонами.

Формат ввода
В первой строке входного файла записано целое число N (0 ≤ N ≤ 100). В каждой из последующих N строк записано одно целое число, обозначающее стоимость обеда в рублях на соответствующий день. Стоимость — неотрицательное целое число, не превосходящее 300.

Формат вывода
В первой строке выдайте минимальную возможную суммарную стоимость обедов. Во второй строке выдайте два числа K1 и K2 — количество купонов, которые останутся неиспользованными у Пети после этих N дней и количество использованных им купонов соответственно.

В последующих K2 строках выдайте в возрастающем порядке номера дней, когда Пете следует воспользоваться купонами. Если существует несколько решений с минимальной суммарной стоимостью, то выдайте то из них, в котором значение K1 максимально (на случай, если Петя когда-нибудь ещё решит заглянуть в это кафе). Если таких решений несколько, выведите любое из них.*/
const fs = require('fs');
let arr = fs.readFileSync('input.txt', 'utf8').split(/[\r\n]/gu).filter(Boolean)

let n = parseInt(arr.shift())

arr = arr.map((x)=> parseInt(x,10))
arr.unshift(0)

let dp = [[]]
dp[0] = Array(n+2).fill(Infinity)
for (let i of Array(n).keys()){
    dp[i+1] = (Array(n+2).fill(Infinity))
}
dp[0][0] = 0

for (let i = 1; i<=n; i++){
    for (let j = 0; j<=n; j++){
        if (arr[i] <= 100){
            dp[i][j] = Math.min(dp[i-1][j] + arr[i], dp[i-1][j+1])
            continue
        }
        if (j !== 0){
            dp[i][j] = Math.min(dp[i-1][j-1] + arr[i], dp[i-1][j+1])
            continue
        }
        dp[i][j] = dp[i-1][j+1]
    }
}

let coupon_balance = 0
let min = Infinity
for (let j = 0; j <= n; j++) {
    if (dp[n][j] <= min) {
        min = dp[n][j]
        coupon_balance = j
    }
}


let used = []
let coupon_used = 0
let i = n
let j = coupon_balance

for (let r = 0 ; r < n; r++){
    if (arr[i] > 100) {
        if (j === 0) {
            used[i] = true;
            coupon_used++;
            j++;
            i--;
        } else if (dp[i - 1][j - 1] + arr[i] < dp[i - 1][j + 1]) {
            i--;
            j--;
        } else {
            used[i] = true;
            coupon_used++;
            i--;
            j++;
        }
    } else {
        if (dp[i - 1][j] + arr[i] < dp[i - 1][j + 1]) {
            i--;
        } else {
            used[i] = true;
            coupon_used++;
            i--;
            j++;
        }
    }
}

process.stdout.write(min + '\n')
process.stdout.write(coupon_balance + ' ' + coupon_used + '\n')
for (let r = 0; r<=n; r++){
    if (used[r]) {
        process.stdout.write(r + '\n')
    }
}
process.exit()